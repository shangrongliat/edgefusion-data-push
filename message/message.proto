syntax = "proto3";

option go_package = "/";

package message;

//基于proto业务消息的通用格式
//目前可以基于zmq和grpc两种交互协议，建议使用grpc
message Message {
  string id                   = 1;  // 消息唯一ID
  uint64 time                 = 2;  // 消息生成时间戳
  MessageType type            = 3;  // 消息类型
  map<string,string> metadata = 4;  // Metadata 元数据，用于动态扩展
  bytes  data                 = 5;  // Payload Data 载荷数据
}

//消息类型，目前定义了resp通用返回，vf视频帧，ir推理结果 三种类型
//vf用于视频服务和推理服务
//ir用于推理服务和消息分发服务
//resp用于所有调用返回
enum MessageType {
  //通用响应类消息
  resp = 0;
  //video frame 视频图片帧
  vf = 1;
  //inference result 推理结果
  ir = 2;
}

//推理结果
//表示一次推理结果
message InferenceResult {
  //模型名称
  string model_name = 1;
  //模型分类: 分类模型、检测模型、分割模型
  string model_type = 2;
  //模型能处理的类别集合，例如目标检测类模型，可以识别人、车、猫等，多个用逗号分割
  string model_category = 3;
  //原始图片帧
  //注意，所有图片格式统一为png/jpg，不会再单独加一个字段表示图片格式
  bytes image_frame = 4;
  //推理结果的目标集合
  repeated Target targets = 5;
}

//目标数据
//不同的模型赋值对应的字段即可，这是一个比较全的字段集合
message Target {
  //目标类别
  string class = 1;
  //目标名称
  string name = 2;
  //得分/概率
  float score = 3;
  //目标坐标，格式为 (x,y,w,h) x,y图片中心坐标，w宽 h高
  string box = 4;
  //目标切片/对目标进行标注后的图片
  //注意，所有图片格式统一为png/jpg，不会再单独加一个字段表示图片格式
  bytes image = 5;
  //目标地理位置，格式为(lon,lat,height) 经度、纬度和高度，有些场景下可以从图片中解算出地理位置
  string location = 6;
}

//grpc调用函数，发送消息
service SendMsg {
  rpc SendMessage(Message) returns (Message);
}